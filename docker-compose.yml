version: '3'
services:
  api_prod:
    container_name: "api_prod"
    ports:
      - 140:80
    build:
      dockerfile: ./api/dockerfiles/Dockerfile
      context: .
    volumes:
      - ${PROD_MP3_VOLUME_PATH}:/code/mp3
      - ${PROD_MP4_VOLUME_PATH}:/code/mp4
      - ${PROD_SPLICES_VOLUME_PATH}:/code/splices
      - ${PROD_MODELS_VOLUME_PATH}:/code/app/models
    depends_on:
      - db_prod

  web_prod:
    container_name: "web_prod"
    ports:
      - 160:3000
    build:
      dockerfile: ./web/dockerfiles/Dockerfile
      context: .
    depends_on:
      - db_prod
      - api_prod

  db_prod:
    container_name: "db_prod"
    image: postgres
    restart: always
    environment:
      - POSTGRES_DB=${PROD_POSTGRES_DB}
      - POSTGRES_USER=${PROD_POSTGRES_USER}
      - POSTGRES_PASSWORD=${PROD_POSTGRES_PASSWORD}
    volumes:
      - ${PROD_DB_VOLUME_PATH}:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  # api_dev:
  #   container_name: "api_dev"
  #   ports:
  #     - 340:180
  #   build:
  #     dockerfile: ./dev/api/dockerfiles/Dockerfile
  #     context: .
  #   volumes:
  #     - ${DEV_MP3_VOLUME_PATH}:/code/mp3
  #     - ${DEV_MP4_VOLUME_PATH}:/code/mp4
  #     - ${DEV_SPLICES_VOLUME_PATH}:/code/splices
  #   depends_on:
  #     - db_dev

  # web_dev:
  #   container_name: "web_dev"
  #   ports:
  #     - 360:3000
  #   build:
  #     dockerfile: ./dev/web/dockerfiles/Dockerfile
  #     context: .
  #   depends_on:
  #     - api_dev

  # db_dev:
  #   container_name: "db_dev"
  #   image: postgres
  #   restart: always
  #   environment:
  #     - DEV_POSTGRES_DB=${DEV_POSTGRES_DB}
  #     - POSTGRES_USER=${DEV_POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${DEV_POSTGRES_PASSWORD}
  #   volumes:
  #     - ${DEV_DB_VOLUME_PATH}:/var/lib/postgresql/data
  #   ports:
  #     - "3333:5432"

  nginx:
    image: nginx:latest
    restart: always
    volumes:
      # - ./nginx:/etc/nginx/conf.d:rw
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ${PROD_SSL_API_CERT_PATH}:/etc/nginx/ssl/api.uneduashqiperine.crt
      - ${PROD_SSL_API_KEY_PATH}:/etc/nginx/ssl/api.uneduashqiperine.key
      - ${PROD_SSL_UNEDUASHQIPERINE_CERT_PATH}:/etc/nginx/ssl/uneduashqiperine.crt
      - ${PROD_SSL_UNEDUASHQIPERINE_KEY_PATH}:/etc/nginx/ssl/uneduashqiperine.key
      # - ${DEV_SSL_API_CERT_PATH}:/etc/nginx/ssl/devapi.uneduashqiperine.crt
      # - ${DEV_SSL_API_KEY_PATH}:/etc/nginx/ssl/devapi.uneduashqiperine.key
      # - ${DEV_SSL_UNEDUASHQIPERINE_CERT_PATH}:/etc/nginx/ssl/dev.uneduashqiperine.crt
      # - ${DEV_SSL_UNEDUASHQIPERINE_KEY_PATH}:/etc/nginx/ssl/dev.uneduashqiperine.key
      - ${COMMUNITY_CERT_PATH}:/etc/nginx/ssl/community.uneduashqiperine.crt
      - ${COMMUNITY_KEY_PATH}:/etc/nginx/ssl/community.uneduashqiperine.key
      - ${DIBRASPEAKS_CERT_PATH}:/etc/nginx/ssl/dibraspeaks.uneduashqiperine.crt
      - ${DIBRASPEAKS_KEY_PATH}:/etc/nginx/ssl/dibraspeaks.uneduashqiperine.key

    ports:
      - 80:80
      - 443:443
    depends_on:
      - api_prod
      - web_prod
      - db_prod
      # - api_dev
      # - web_dev
      # - db_dev
    
  mysql_db: 
    container_name: mysql_container
    environment: 
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
    image: "mysql:8.0"
    restart: always
    volumes: 
      - ${MYSQL_VOLUME}:/var/lib/mysql

  wordpress: 
    container_name: wordpress_container
    depends_on: 
      - mysql_db
    environment: 
      WORDPRESS_DB_HOST: "mysql_db"
      WORDPRESS_DB_NAME: ${MYSQL_DATABASE}
      WORDPRESS_DB_PASSWORD: ${MYSQL_PASSWORD}
      WORDPRESS_DB_USER: ${MYSQL_USER}
    image: "wordpress:latest"
    ports: 
      - "8000:80"
    restart: always
    volumes: 
      - ${WORDPRESS_VOLUME}:/var/www/html

volumes: 
  mysql_data: {}
  wordpress_data: {}